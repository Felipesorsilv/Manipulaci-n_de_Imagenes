using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

Autor: Felipe 
namespace FiltradoImagenes
{
    public partial class Form1 : Form
    {
        Bitmap myPic,final,filtro;
        public Form1()
        {
            InitializeComponent();
        }

        // Modulo para cargar imagen
        private void button1_Click(object sender, EventArgs e)
        {
            OpenFileDialog imag = new OpenFileDialog();// Abre la ventana para ubicar el archivo
            imag.InitialDirectory = "G:\\Sem2017 - I\\ImagenesRobo";// Directorio por defecto para ubicar imagen
            imag.Filter = "Archivos JPEG(*.jpg)|*.jpg";//Acepta imagenes jpg
            if (imag.ShowDialog() == DialogResult.OK)
            {
               myPic= new Bitmap(Image.FromFile(imag.FileName));
                imagen.Image = myPic;// Pone la imagen cargada
            }
        }
       

     
        // Modulo que permite insertar la imagen en escala de grises
        private void button2_Click(object sender, EventArgs e)
        {

            byte Rojo, Verde, Azul;
            int temp;
            byte aux;
            int w = myPic.Width, h = myPic.Height;
            final = new Bitmap(w, h);
            Color actual, gris;

            for (int i = 0; i < w; i++)
            {
                for (int j = 0; j < h; j++)
                {
                    actual = myPic.GetPixel(i, j);
                    Rojo = actual.R;//Valores actual del Rojo
                    Verde = actual.G;//Valores actual del Verde
                    Azul = actual.B;//Valores actual del Azul
                    temp = (int)(Rojo + Verde + Azul) / 3;// hallamos el promedio de los valores de byte para poder determinar el valor griss
                    aux = (byte)temp;
                    gris = Color.FromArgb(aux, aux, aux);// reemplazamos los tres valores iniciales por el valor gris hallado en cada uno
                    final.SetPixel(i, j, gris);// valor gris para cada casilla
                }
            }
            imagen2.Image = final;// pone la imagen para ser mostrada
        }


        //Filtro borde
        private void button4_Click(object sender, EventArgs e)
        {
            int w = final.Width, h = myPic.Height;
            filtro = new Bitmap(w,h);
            Color nuevo;
            int[,] M = new int[w,h];
            int[,] R = new int[w,h];
            int[,] Mascara = new int[,] { { 0, 1, 0 }, { 1, -4, 1 }, { 0, 1, 0 } };
            for (int l = 0; l< w;l++)
            {

                for (int p = 0; p< h; p++)
                {
                    M[l, p] = final.GetPixel(l, p).R;

                }
            }
            //Procesamos la respuesta
            for (int i = 0; i < w; i++)
            {

                for (int j = 0; j < h; j++)
                {
                    //multiplicar matriz con matriz convolucion para el filtro
                    //analisis primera fila
                    if (i == 0)
                    {
                        if (j == 0)
                        {
                            R[i, j] = M[i, j] * 0 + M[i, j + 1] * 1 + M[i + 1, j] - 2 * M[i + 1, j + 1];
                        }
                        if (j == h - 1)
                        {
                            R[i, j] = M[i, j - 1] + M[i + 1, j] - 2 * M[i + 1, j - 1];
                        }
                        if ((j > 0) && (j < h - 1))
                        {
                            R[i, j] = M[i, j - 1] * 0 + M[i, j] + M[i + 1, j - 1] - 3 * M[i + 1, j] + M[i + 1, j + 1];
                        }

                    }
                    //analisis i = w ultima fila
                    if (i == w - 1)
                    {
                        if (j == 0)
                        {
                            R[i, j] = M[i - 1, j] - 2 * M[i - 1, j + 1] + M[i, j + 1];
                        }
                        if (j == h - 1)
                        {
                            R[i, j] = -2 * M[i - 1, j - 1] + M[i - 1, j] + M[i, j - 1];
                        }
                        if ((j > 0) && (j < h - 1))
                        {
                            R[i, j] = M[i, j] + M[i - 1, j - 1] + -3 * M[i - 1, j] + M[i - 1, j + 1];
                        }
                    }
                    if (j == 0)
                    {
                        if (i > 0 && i < w - 1)
                        {
                            R[i, j] = M[i - 1, j + 1] + M[i, j] - 3 * M[i, j + 1] + M[i + 1, j + 1];
                        }
                    }
                    if (j == h - 1)
                    {

                        if (i > 0 && i < w - 1)
                        {
                            R[i, j] = M[i - 1, j - 1] - 3 * M[i, j - 1] + M[i, j] + M[i + 1, j - 1];
                        }
                    }
                    if ((i > 0) && (j > 0) && (i < w - 1) && (j < h - 1))
                    {

                        R[i, j] = M[i - 1, j] + M[i, j - 1] + M[i, j + 1] - 4 * M[i, j] + M[i + 1, j];
                    }

                    
                    /////////////////Controlar excesos si sale mayor a 255 dejar en 255 y si sale menor a 0 dejar en 0
                    if (R[i,j] > 255)
                    {
                        R[i, j] = 255;
                    }
                    if (R[i, j] < 0)
                    {
                        R[i, j] = 0;
                    }
                    /// llevar a imagen
                    int mit = R[i, j];
                    nuevo = Color.FromArgb(mit, mit, mit);
                    filtro.SetPixel(i, j, nuevo);

                }
                
                // llevamos a imagen
              
            }

            imagen3.Image = filtro;

        }
       

        private void filtroEnfoque_Click(object sender, EventArgs e)
        {
            int w = final.Width, h = myPic.Height;
            filtro = new Bitmap(w, h);
            Color nuevo;
            int[,] M = new int[w, h];
            int[,] R = new int[w, h];
            int[,] Mascara = new int[,] { { 0, 1, 0 }, { 1, -4, 1 }, { 0, 1, 0 } };
            for (int l = 0; l < w; l++)
            {

                for (int p = 0; p < h; p++)
                {
                    M[l, p] = final.GetPixel(l, p).R;

                }
            }
            //Procesamos la respuesta
            for (int i = 0; i < w; i++)
            {

                for (int j = 0; j < h; j++)
                {
                    //multiplicar matriz con matriz convolucion para el filtro
                    //analisis primera fila
                    if (i == 0)
                    {
                        if (j == 0)
                        {
                            R[i, j] = M[i, j];//* 0 + M[i, j + 1] * 1 + M[i + 1, j] - 2 * M[i + 1, j + 1];
                        }
                        if (j == h - 1)
                        {
                            R[i, j] = M[i, j];// + M[i + 1, j] - 2 * M[i + 1, j - 1];
                        }
                        if ((j > 0) && (j < h - 1))
                        {
                            R[i, j] = M[i, j];//* 0 + M[i, j] + M[i + 1, j - 1] - 3 * M[i + 1, j] + M[i + 1, j + 1];
                        }

                    }
                    //analisis i = w ultima fila
                    if (i == w - 1)
                    {
                        if (j == 0)
                        {
                            R[i, j] = M[i, j];// - 2 * M[i - 1, j + 1] + M[i, j + 1];
                        }
                        if (j == h - 1)
                        {
                            R[i, j] = M[i, j];//-2 * M[i - 1, j - 1] + M[i - 1, j] + M[i, j - 1];
                        }
                        if ((j > 0) && (j < h - 1))
                        {
                            R[i, j] = M[i, j];// + M[i - 1, j - 1] + -3 * M[i - 1, j] + M[i - 1, j + 1];
                        }
                    }
                    if (j == 0)
                    {
                        if (i > 0 && i < w - 1)
                        {
                            R[i, j] = M[i, j];//M[i - 1, j + 1] + M[i, j] - 3 * M[i, j + 1] + M[i + 1, j + 1];
                        }
                    }
                    if (j == h - 1)
                    {

                        if (i > 0 && i < w - 1)
                        {
                            R[i, j] = M[i, j];//M[i - 1, j - 1] - 3 * M[i, j - 1] + M[i, j] + M[i + 1, j - 1];
                        }
                    }
                    if ((i > 0) && (j > 0) && (i < w - 1) && (j < h - 1))
                    {

                        R[i, j] = -1*M[i - 1, j] -1*M[i, j - 1] -1*M[i, j + 1] + 5 * M[i, j] -1*M[i + 1, j];
                    }


                    /////////////////Controlar excesos si sale mayor a 255 dejar en 255 y si sale menor a 0 dejar en 0
                    if (R[i, j] > 255)
                    {
                        R[i, j] = 255;
                    }
                    if (R[i, j] < 0)
                    {
                        R[i, j] = 0;
                    }
                    /// llevar a imagen
                    int mit = R[i, j];
                    nuevo = Color.FromArgb(mit, mit, mit);
                    filtro.SetPixel(i, j, nuevo);

                }

                // llevamos a imagen

            }

            imagen3.Image = filtro;

        }

        private void filtroMediana_Click(object sender, EventArgs e)
        {
            
            int w = final.Width, h = myPic.Height;
            filtro = new Bitmap(w, h);
            Color nuevo;
            int[,] M = new int[w, h];
            int[,] R = new int[w, h];
            for (int l = 0; l < w; l++)
            {

                for (int p = 0; p < h; p++)
                {
                    M[l, p] = final.GetPixel(l, p).R;

                }
            }
            //Procesamos la respuesta
            for (int i = 0; i < w; i++)
            {

                for (int j = 0; j < h; j++)
                {
                    //multiplicar matriz con matriz convolucion para el filtro
                    //analisis primera fila
                    if (i == 0)
                    {
                        if (j == 0)
                        {
                            R[i, j] = M[i, j];//* 0 + M[i, j + 1] * 1 + M[i + 1, j] - 2 * M[i + 1, j + 1];
                        }
                        if (j == h - 1)
                        {
                            R[i, j] = M[i, j];// + M[i + 1, j] - 2 * M[i + 1, j - 1];
                        }
                        if ((j > 0) && (j < h - 1))
                        {
                            R[i, j] = M[i, j];//* 0 + M[i, j] + M[i + 1, j - 1] - 3 * M[i + 1, j] + M[i + 1, j + 1];
                        }

                    }
                    //analisis i = w ultima fila
                    if (i == w - 1)
                    {
                        if (j == 0)
                        {
                            R[i, j] = M[i, j];// - 2 * M[i - 1, j + 1] + M[i, j + 1];
                        }
                        if (j == h - 1)
                        {
                            R[i, j] = M[i, j];//-2 * M[i - 1, j - 1] + M[i - 1, j] + M[i, j - 1];
                        }
                        if ((j > 0) && (j < h - 1))
                        {
                            R[i, j] = M[i, j];// + M[i - 1, j - 1] + -3 * M[i - 1, j] + M[i - 1, j + 1];
                        }
                    }
                    if (j == 0)
                    {
                        if (i > 0 && i < w - 1)
                        {
                            R[i, j] = M[i, j];//M[i - 1, j + 1] + M[i, j] - 3 * M[i, j + 1] + M[i + 1, j + 1];
                        }
                    }
                    if (j == h - 1)
                    {

                        if (i > 0 && i < w - 1)
                        {
                            R[i, j] = M[i, j];//M[i - 1, j - 1] - 3 * M[i, j - 1] + M[i, j] + M[i + 1, j - 1];
                        }
                    }
                    if ((i > 0) && (j > 0) && (i < w - 1) && (j < h - 1))
                    {
                        int[] A = new int[] { M[i - 1, j - 1], M[i - 1, j], M[i - 1, j + 1], M[i, j - 1], M[i, j], M[i, j + 1], M[i + 1, j - 1], M[i + 1, j], M[i + 1, j + 1] };
                        mergeSort(ref A);
                        int n = A[4];
                        R[i, j] = n;
                    }


                    /////////////////Controlar excesos si sale mayor a 255 dejar en 255 y si sale menor a 0 dejar en 0
                    if (R[i, j] > 255)
                    {
                        R[i, j] = 255;
                    }
                    if (R[i, j] < 0)
                    {
                        R[i, j] = 0;
                    }
                    /// llevar a imagen
                    int mit = R[i, j];
                    nuevo = Color.FromArgb(mit, mit, mit);
                    filtro.SetPixel(i, j, nuevo);

                }

                // llevamos a imagen

            }

            imagen3.Image = filtro;
        }

        static void mergeSort(ref int[] a)
        {
            int[] r = new int[a.Length];
            mergeSort(ref a, ref r, 0, a.Length - 1);

        }

        static void mergeSort(ref int[] a, ref int[] r, int izq, int der)
        {
            if (izq < der)
            {
                int centro = (izq + der) / 2;
                mergeSort(ref a, ref r, izq, centro); // A
                mergeSort(ref a, ref r, centro + 1, der); // B
                mezclar(ref a, ref r, izq, centro + 1, der); // C
            }
        }
        static void mezclar(ref int[] a, ref int[] r, int posIzq, int posDer, int posFin)
        {
            int finIzq = posDer - 1;
            int posAux = posIzq;
            int numElementos = posFin - posIzq + 1;
            // Bucle principal
            while (posIzq <= finIzq && posDer <= posFin)
                if (a[posIzq] < a[posDer])
                    r[posAux++] = a[posIzq++];
                else
                    r[posAux++] = a[posDer++];
            // Copiar el resto de la primera mitad
            while (posIzq <= finIzq)
                r[posAux++] = a[posIzq++];
            // copiar resto de la segunda mitad
            while (posDer <= posFin)
                r[posAux++] = a[posDer++];
            // copiar el arreglo temporal al original
            for (int i = 0; i < numElementos; i++, posFin--)
                a[posFin] = r[posFin];
        }

        private void FiltroEste_Click(object sender, EventArgs e)
        {
            int w = final.Width, h = myPic.Height;
            filtro = new Bitmap(w, h);
            Color nuevo;
            int[,] M = new int[w, h];
            int[,] R = new int[w, h];
            int[,] Mascara = new int[,] { { 0, 1, 0 }, { 1, -4, 1 }, { 0, 1, 0 } };
            for (int l = 0; l < w; l++)
            {

                for (int p = 0; p < h; p++)
                {
                    M[l, p] = final.GetPixel(l, p).R;

                }
            }
            //Procesamos la respuesta
            for (int i = 0; i < w; i++)
            {

                for (int j = 0; j < h; j++)
                {
                    //multiplicar matriz con matriz convolucion para el filtro
                    //analisis primera fila
                    if (i == 0)
                    {
                        if (j == 0)
                        {
                            R[i, j] = M[i, j];//* 0 + M[i, j + 1] * 1 + M[i + 1, j] - 2 * M[i + 1, j + 1];
                        }
                        if (j == h - 1)
                        {
                            R[i, j] = M[i, j];// + M[i + 1, j] - 2 * M[i + 1, j - 1];
                        }
                        if ((j > 0) && (j < h - 1))
                        {
                            R[i, j] = M[i, j];//* 0 + M[i, j] + M[i + 1, j - 1] - 3 * M[i + 1, j] + M[i + 1, j + 1];
                        }

                    }
                    //analisis i = w ultima fila
                    if (i == w - 1)
                    {
                        if (j == 0)
                        {
                            R[i, j] = M[i, j];// - 2 * M[i - 1, j + 1] + M[i, j + 1];
                        }
                        if (j == h - 1)
                        {
                            R[i, j] = M[i, j];//-2 * M[i - 1, j - 1] + M[i - 1, j] + M[i, j - 1];
                        }
                        if ((j > 0) && (j < h - 1))
                        {
                            R[i, j] = M[i, j];// + M[i - 1, j - 1] + -3 * M[i - 1, j] + M[i - 1, j + 1];
                        }
                    }
                    if (j == 0)
                    {
                        if (i > 0 && i < w - 1)
                        {
                            R[i, j] = M[i, j];//M[i - 1, j + 1] + M[i, j] - 3 * M[i, j + 1] + M[i + 1, j + 1];
                        }
                    }
                    if (j == h - 1)
                    {

                        if (i > 0 && i < w - 1)
                        {
                            R[i, j] = M[i, j];//M[i - 1, j - 1] - 3 * M[i, j - 1] + M[i, j] + M[i + 1, j - 1];
                        }
                    }
                    if ((i > 0) && (j > 0) && (i < w - 1) && (j < h - 1))
                    {

                        R[i, j] = (M[i-1,j-1] + M[i-1,j] + M[i-1,j+1]+M[i,j-1]+M[i,j]+M[i,j+1]+M[i+1,j-1]+M[i+1,j]+M[i+1,j+1])/ 9;
                    }


                    /////////////////Controlar excesos si sale mayor a 255 dejar en 255 y si sale menor a 0 dejar en 0
                    if (R[i, j] > 255)
                    {
                        R[i, j] = 255;
                    }
                    if (R[i, j] < 0)
                    {
                        R[i, j] = 0;
                    }
                    /// llevar a imagen
                    int mit = R[i, j];
                    nuevo = Color.FromArgb(mit, mit, mit);
                    filtro.SetPixel(i, j, nuevo);

                }

                // llevamos a imagen

            }

            imagen3.Image = filtro;
        }

        // Modulo para FILTRO SOBEL
        private void button4_Click_1(object sender, EventArgs e)
        {
            int w = final.Width, h = myPic.Height;
            filtro = new Bitmap(w, h);
            Color nuevo;
            int[,] M = new int[w, h];
            int[,] R = new int[w, h];
            int[,] Mascara = new int[,] { { 0, 1, 0 }, { 1, -4, 1 }, { 0, 1, 0 } };
            for (int l = 0; l < w; l++)
            {

                for (int p = 0; p < h; p++)
                {
                    M[l, p] = final.GetPixel(l, p).R;

                }
            }
            //Procesamos la respuesta
            for (int i = 0; i < w; i++)
            {

                for (int j = 0; j < h; j++)
                {
                    //multiplicar matriz con matriz convolucion para el filtro
                    //analisis primera fila
                    if (i == 0)
                    {
                        if (j == 0)
                        {
                            R[i, j] = M[i, j];//* 0 + M[i, j + 1] * 1 + M[i + 1, j] - 2 * M[i + 1, j + 1];
                        }
                        if (j == h - 1)
                        {
                            R[i, j] = M[i, j];// + M[i + 1, j] - 2 * M[i + 1, j - 1];
                        }
                        if ((j > 0) && (j < h - 1))
                        {
                            R[i, j] = M[i, j];//* 0 + M[i, j] + M[i + 1, j - 1] - 3 * M[i + 1, j] + M[i + 1, j + 1];
                        }

                    }
                    //analisis i = w ultima fila
                    if (i == w - 1)
                    {
                        if (j == 0)
                        {
                            R[i, j] = M[i, j];// - 2 * M[i - 1, j + 1] + M[i, j + 1];
                        }
                        if (j == h - 1)
                        {
                            R[i, j] = M[i, j];//-2 * M[i - 1, j - 1] + M[i - 1, j] + M[i, j - 1];
                        }
                        if ((j > 0) && (j < h - 1))
                        {
                            R[i, j] = M[i, j];// + M[i - 1, j - 1] + -3 * M[i - 1, j] + M[i - 1, j + 1];
                        }
                    }
                    if (j == 0)
                    {
                        if (i > 0 && i < w - 1)
                        {
                            R[i, j] = M[i, j];//M[i - 1, j + 1] + M[i, j] - 3 * M[i, j + 1] + M[i + 1, j + 1];
                        }
                    }
                    if (j == h - 1)
                    {

                        if (i > 0 && i < w - 1)
                        {
                            R[i, j] = M[i, j];//M[i - 1, j - 1] - 3 * M[i, j - 1] + M[i, j] + M[i + 1, j - 1];
                        }
                    }
                    if ((i > 0) && (j > 0) && (i < w - 1) && (j < h - 1))
                    {

                        R[i, j] = (M[i - 1, j - 1] + M[i - 1, j] + M[i - 1, j + 1] + M[i, j - 1] -2*M[i, j] + M[i, j + 1] + M[i + 1, j - 1] -1*M[i + 1, j] -1*M[i + 1, j + 1]);
                    }


                    /////////////////Controlar excesos si sale mayor a 255 dejar en 255 y si sale menor a 0 dejar en 0
                    if (R[i, j] > 255)
                    {
                        R[i, j] = 255;
                    }
                    if (R[i, j] < 0)
                    {
                        R[i, j] = 0;
                    }
                    /// llevar a imagen
                    int mit = R[i, j];
                    nuevo = Color.FromArgb(mit, mit, mit);
                    filtro.SetPixel(i, j, nuevo);

                }

                // llevamos a imagen

            }

            imagen3.Image = filtro;
        }

        //MODULO de FILTRO General, encargada de hacer las operaciones necesarias con cualquier matriz ingresada por consola
        private void filtrog_Click(object sender, EventArgs e)
        {
            double a11;
            a11 = Convert.ToDouble(tb11.Text);//Recuperamos el primer valor ingresado por consola y lo convertimos en double
            a11 = int.Parse(tb11.Text);
            double a12;
            a12= Convert.ToDouble(tb12.Text);
            a12 = int.Parse(tb12.Text);
            double a13;
            a13 = Convert.ToDouble(tb13.Text);
            a13 = int.Parse(tb13.Text);
            double a21;
            a21 = Convert.ToDouble(tb21.Text);
            a21 = int.Parse(tb21.Text);
            double a22;
            a22 = Convert.ToDouble(tb22.Text);
            a22 = int.Parse(tb22.Text);
            double a23;
            a23 = Convert.ToDouble(tb23.Text);
            a23= int.Parse(tb23.Text);
            double a31;
            a31 = Convert.ToInt32(tb31.Text);
            a31 = int.Parse(tb31.Text);
            double a32;
            a32 = Convert.ToInt32(tb32.Text);
            a32 = int.Parse(tb32.Text);
            double a33;
            a33 = Convert.ToInt32(tb33.Text);
            a33 = int.Parse(tb33.Text);

            // aplicar filtro

            int w = final.Width, h = myPic.Height;
            filtro = new Bitmap(w, h);
            Color nuevo;
            int[,] M = new int[w, h];
            int[,] R = new int[w, h];
            int[,] Mascara = new int[,] { { 0, 1, 0 }, { 1, -4, 1 }, { 0, 1, 0 } };
            for (int l = 0; l < w; l++)
            {

                for (int p = 0; p < h; p++)
                {
                    M[l, p] = final.GetPixel(l, p).R;

                }
            }
            //Procesamos la respuesta
            for (int i = 0; i < w; i++)
            {

                for (int j = 0; j < h; j++)
                {
                    //multiplicar matriz con matriz convolucion para el filtro
                    //analisis primera fila
                    if (i == 0)
                    {
                        if (j == 0)
                        {
                            R[i, j] = M[i, j];//* 0 + M[i, j + 1] * 1 + M[i + 1, j] - 2 * M[i + 1, j + 1];
                        }
                        if (j == h - 1)
                        {
                            R[i, j] = M[i, j];// + M[i + 1, j] - 2 * M[i + 1, j - 1];
                        }
                        if ((j > 0) && (j < h - 1))
                        {
                            R[i, j] = M[i, j];//* 0 + M[i, j] + M[i + 1, j - 1] - 3 * M[i + 1, j] + M[i + 1, j + 1];
                        }

                    }
                    //analisis i = w ultima fila
                    if (i == w - 1)
                    {
                        if (j == 0)
                        {
                            R[i, j] = M[i, j];// - 2 * M[i - 1, j + 1] + M[i, j + 1];
                        }
                        if (j == h - 1)
                        {
                            R[i, j] = M[i, j];//-2 * M[i - 1, j - 1] + M[i - 1, j] + M[i, j - 1];
                        }
                        if ((j > 0) && (j < h - 1))
                        {
                            R[i, j] = M[i, j];// + M[i - 1, j - 1] + -3 * M[i - 1, j] + M[i - 1, j + 1];
                        }
                    }

                    if (j == 0)
                    {
                        if (i > 0 && i < w - 1)
                        {
                            R[i, j] = M[i, j];//M[i - 1, j + 1] + M[i, j] - 3 * M[i, j + 1] + M[i + 1, j + 1];
                        }
                    }
                    if (j == h - 1)
                    {

                        if (i > 0 && i < w - 1)
                        {
                            R[i, j] = M[i, j];//M[i - 1, j - 1] - 3 * M[i, j - 1] + M[i, j] + M[i + 1, j - 1];
                        }
                    }
                    if ((i > 0) && (j > 0) && (i < w - 1) && (j < h - 1))
                    {

                        R[i, j] = Convert.ToInt32((M[i - 1, j - 1] * a11 + M[i - 1, j] * a12 + M[i - 1, j + 1] * a13 + M[i, j - 1] * a21 + a22 * M[i, j] + a23 * M[i, j + 1] + a31 * M[i + 1, j - 1] + a32 * M[i + 1, j] + a33 * M[i + 1, j + 1]));
                    }


                    /////////////////Controlar excesos si sale mayor a 255 dejar en 255 y si sale menor a 0 dejar en 0
                    if (R[i, j] > 255)
                    {
                        R[i, j] = 255;
                    }
                    if (R[i, j] < 0)
                    {
                        R[i, j] = 0;
                    }
                    /// llevar a imagen
                    int mit = R[i, j];
                    nuevo = Color.FromArgb(mit, mit, mit);
                    filtro.SetPixel(i, j, nuevo);

                }


                // llevamos a imagen
            }

            imagen3.Image = filtro;

        }

        private void label1_Click(object sender, EventArgs e)
        {

        }

        private void Form1_Load(object sender, EventArgs e)
        {

        }

        private void button3_Click(object sender, EventArgs e)
        {
            Close();
        }
    }
}
